/* autogenerated by Processing revision 1276 on 2021-09-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class EUPHORYA extends PApplet {

//variabile per capire quale droga è stata scelta
int droga = 0;

//variabile per capire in che livello si trova l'utente
int livello = 0;

/* variables */
  //variabile contatore d2l2
  int typedLettersLv2 = 0;
  int timesTextHasChanged = 0;
  int stringTimer = 0;
  boolean playDrone = true;

  //d2l3 variabili per movimento lettere
  boolean letterOneClicked = false;
  boolean letterTwoClicked = false;
  boolean letterThreeClicked = false;
  boolean letterFourClicked = false;
  boolean letterFiveClicked = false;
  boolean letterSixClicked = false;
  boolean letterSevenClicked = false;

  int levelEndLives = 3;
  boolean mouseIsOnValid = false;

  //variabile per la chiusura nel glitch d1l3
  int quitTimer = 0;

  // variabile per info sul gioco
  boolean gameInfo = false;

  // variabile per mostrare l'avviso per contenuti che possono suscitare reazioni epilettici
  boolean epilepsyWarning = false;
  Timer warning_timer;

  //variabile font
  PFont font;

  //variabili per l'animazione del terzo elemento del menù
  float menu3size = 24;
  float menu3opacity = 255;
  boolean decreasing = true;

  //variabili per importare e impostare il suono
  
  SoundFile menuMove;
  SoundFile tooMuchText;
  SoundFile lvlSelect;
  SoundFile lvlComplete;
  SoundFile lvlSolved;
  
  SoundFile tw1;
  SoundFile tw2;

  SoundFile ding;
  SoundFile drone;

  boolean playSound = true;

  //imposto alcune variabili per l'hover del primo elemento del menù
  boolean hover1 = true;
  float menu1Opacity = 255;
  float hoverMenu1Pos = 0;

  //la stringa principale
  String s = "";

  // la sottostring d2l2
  String secondString = "";
  
  //dichiaro un timer
  Timer b_timer;

  // stringa di accumulo cannabinoidi
  String b = ""; 

  // queste servono per il movimento del cursorino
  float cursorStart;
  float originalCursorStart;
  float characterWidth = 18;

  //imposto alcune variabili per la posizione del secondo elemento del menù
  float menu2x = width/2;
  float menu2y = height/2 + 50;

  //variabile per passare liv 1
  String DrogaLv0 = "i'm fine";

  //il lv3 di allucinogeni è strano serve una stringa (a quanto pare)
  String stringalv3 = "I'M FINE";

  //dichiaro la booleana che permette al suono lvlSolved di ripetersi più volte
  boolean solved = true;

  //varibili lv1d3
  float msAttuali;

  //variabile per accertamento nuvo Livello
  boolean newLevel = true;

  //variabile contatore terzo livello cannabinoidi
  int contatore = 0;

  //variabile sfondo livelli allucinogeni
  float angolo;
  int illusionIndex = 20;

  int xfine = 150;
  int xiniz = 25;
  int yfine = 50;
  int yiniz = 55;
  int ciclofine;

  boolean gameOver = true;

  String[] paranoiaStrings = {"it doesn't make sense for you to love me...", "i just want to sleep until I feel better", "i miss the person I used to be", "i feel lost inside of myself", "why does everything always feel worse at night?", "something inside me just...broke...", "it feels like this is never going to end", "the pain is so heavy that I can’t get away from it", "all i really want is to be found", "i thought by masking them, the feelings might disappear", "why can't i just let myself be happy?", "it’s not just a bad day"};

  int[] paranoiaPositionsX = new int[12];
  int[] paranoiaPositionsY = new int[12];

  int amountOfStrings = 0;
/* end variables*/

 public void setup() {
  /* size commented out by preprocessor */;
  //carico la font nel programma
  font = loadFont("DeterminationMonoWeb-48.vlw");
  textFont(font);
  //carico il file audio dell'hover del menù
  menuMove = new SoundFile(this, "menuMove.wav");
  //carico il file audio del tooMuchText
  tooMuchText = new SoundFile(this, "tooMuchText.wav");
  //carico il file audio "lvlSelect"
  lvlSelect = new SoundFile(this, "lvlSelect.wav");
  //carico il file audio "lvlComplete"
  lvlComplete = new SoundFile(this, "lvlComplete.wav");
  //carico il file audio "lvlSolved"
  lvlSolved = new SoundFile(this, "lvlSolved.wav");

  //carico i suoni della macchina da scrivere
  tw1 = new SoundFile(this, "tw1.wav");
  tw2 = new SoundFile(this, "tw1.wav");

  ding = new SoundFile(this, "ding.wav");
  drone = new SoundFile(this, "drone.wav");

  b_timer = new Timer();
  warning_timer = new Timer();
  cursorStart = width/2 - 70;
  originalCursorStart = width/2 - 70;

  paranoiaPositionsX[0] = width/2 ;
  paranoiaPositionsX[1] = PApplet.parseInt(width / 1.6f);
  paranoiaPositionsX[2] = PApplet.parseInt(width / 1.3f);
  paranoiaPositionsX[3] = PApplet.parseInt(width / 1.4f);
  paranoiaPositionsX[4] = width/12;
  paranoiaPositionsX[5] = width/3;
  paranoiaPositionsX[6] = width/14;
  paranoiaPositionsX[7] = width/6;
  paranoiaPositionsX[8] = PApplet.parseInt(width/1.5f);
  paranoiaPositionsX[9] = PApplet.parseInt(width/16);
  paranoiaPositionsX[10] = PApplet.parseInt(width/4);
  paranoiaPositionsX[11] = PApplet.parseInt(width/1.4f);

  paranoiaPositionsY[0] = PApplet.parseInt(height / 6);
  paranoiaPositionsY[1] = height - 50;
  paranoiaPositionsY[2] = PApplet.parseInt(height / 3);
  paranoiaPositionsY[3] = height - 150;
  paranoiaPositionsY[4] = PApplet.parseInt(height / 2);
  paranoiaPositionsY[5] = PApplet.parseInt(height / 1.3f);
  paranoiaPositionsY[6] = 120;
  paranoiaPositionsY[7] = PApplet.parseInt(height / 1.1f);
  paranoiaPositionsY[8] = PApplet.parseInt(height / 2.3f);
  paranoiaPositionsY[9] = PApplet.parseInt(height / 1.4f);
  paranoiaPositionsY[10] = PApplet.parseInt(height / 4);
  paranoiaPositionsY[11] = PApplet.parseInt(height / 1.7f);
}

 public void draw() {
  background(0);
  fill(255);

  //ANCHOR epilepsy warning
  if (epilepsyWarning) {
    fill(0);
    rect(0, 0, width, height);
 
    fill(255);
    textAlign(CENTER);
    textSize(48);
    text("WARNING", width/2, height/2-200);

    textSize(24);

    text("This experience contains fast flashing images and colors. \n It may cause discomfort and trigger seizures for individuals with photosensitive epilepsy. \n \n Discretion is advised. \n \n EUPHORYA is born with the purpose of shining a light on the bad effects of drugs on the human brain and body. \n \n Drug consumption is in any way discouraged and to be avoided at all costs.", 
        width/2, height/2 - 100);

    if(warning_timer.check(10000)) {
      textSize(36);
      text("I UNDERSTOOD", width/2, height - 400);
      //if (mouseX > width/2 - 75 && mouseX < width/2 +75 && mouseY > height- 400 - 15 && mouseY < height - 400 - 15) { 
      if (mouseX > width/2 - 115 && mouseX < width/2 + 115 && mouseY > height - 425 && mouseY < height - 395) { 
        //il mouse si trova sul primo elemento
        //cambio il cursore del mouse
        cursor(HAND);
        //riproduco l'elemento musicale
        if (playSound) {
          menuMove.play();
          playSound = false;
        }
        //imposto la logica per la quale il click mi porta a quella sezione del codice
        if (mousePressed) {
          droga = 0;
          lvlSelect.play();
          epilepsyWarning = false;
        }
      } else {
        // il muose non è su nessun pulsante
        playSound = true;
        cursor(ARROW);
      }
    }
  }

  //ANCHOR gameInfo
  if(gameInfo) {
    fill(0);
    rect(0,0, width, height);

    fill(255);
    textAlign(CENTER);
    textSize(48);
    text("EUPHORIA", width/2, 100);

    textSize(24);
    text("v.2.0.0", width/2, 150);

    text("This game was first produced in 2018 as an Interaction Design exam at Quasar Institute for Advanced Design \n by Giorgio Perri as the game developer and Marco Preti as the concept artist and copywriter. \n \n \n The institute asked us to update the project several times for showcasing purposes, hence the need for version control. \n\n\n In September 2021, the game was largely updated by Giorgio Perri \n with the purpose of creating a game programming portfolio, resulting in version 2.0.0 \n\n\n As young adults who are largely exposed to the world of drugs and alcohol, we decided \n to try and raise awareness on this really delicate subject. \n\n\n We strongly discourage not only young people, but everyone from consuming drugs or alcohol, \n and we strongly advise everyone to never feel guilty or ashamed about asking for help if needed. \n\n Some useful numbers: \n\n USA: 866.235.4572 \n Italy: 800.189.433 \n UK: 0300.330.0659\n\n\n It's never too late to save your life and the one of people around you. \n\n ----- \n\n Levels in EUPHORIA do not simply represent your progress in the game. Each of \n the three levels relatively represent a short, medium, and long term usage of the selected drug category. \n Levels drastically increase in difficulty, and every third level contains a trick that will make you lose all progress. \n\n Pay extra attention to those and if you get frustrated, remember: that's what drugs do to your brain.", 
        width/2, height/2 - 325);

    textSize(36);
    text("BACK", width/2, height - 50);
    if (mouseX > width/2 - 65 && mouseX < width/2 + 65 && mouseY > height - 75 && mouseY < height - 25) { 
      
      //imposto la logica per la quale il click mi porta a quella sezione del codice
      if (mousePressed) {
        droga = 0;
        gameInfo = false;
      }
      cursor(HAND);
    }
  }
  
  //ANCHOR menu
  if (droga == 0) {
    //scrivo il titolo del gioco
    textAlign(CENTER);
    textSize(48);
    text("EUPHORYA", width/2, height/2-100);
    //disegno il primo tasto
    textSize(24);
    text("Hallucinogens", width/2, height/2);
    //disegno il secondo tasto
    textSize(24);
    text("Stimulants", menu2x, menu2y);
    //disegno il terzo tasto
    fill(255, menu3opacity);
    textSize(menu3size);
    text("Cannabinoids", width/2, height/2+100);
    fill(255, 50);
    textAlign(RIGHT);
    textSize(24);
    text("About this game", width - 20, height - 20);
    textAlign(CENTER);
    fill(255);

    // logica dell'hover dei tasti, ogni else un diverso tasto
    if (mouseX > width/2 - 75 && mouseX < width/2 +75 && mouseY > height/2-15 && mouseY < height/2) { 
      //il mouse si trova sul primo elemento
      //cambio il cursore del mouse
      cursor(HAND);
      //riproduco l'elemento musicale
      if (playSound) {
        menuMove.play();
        playSound = false;
      }
      //imposto il movimento intorno alla parola
      if (menu1Opacity < 0) {
        hoverMenu1Pos = 0;
        menu1Opacity = 255;
      }
      if (hover1) {
        fill(255, menu1Opacity);
        text("Hallucinogens", width/2 + hoverMenu1Pos, height/2 + hoverMenu1Pos);
        text("Hallucinogens", width/2 - hoverMenu1Pos, height/2 - hoverMenu1Pos);
        hoverMenu1Pos = hoverMenu1Pos + 0.1f;
        menu1Opacity = menu1Opacity - 2;
      }
      //reimposto le variabili in modo da permettere il loop
      else {
        fill(255);
        hoverMenu1Pos = 0;
        menu1Opacity = 255;
      }
      //imposto la logica per la quale il click mi porta a quella sezione del codice
      if (mousePressed) {
        droga = 1;
        lvlSelect.play();
        cursor(ARROW);
      }
    } else if (mouseX > width/2 - 60 && mouseX < width/2 + 60 && mouseY > height/2+35 && mouseY < height/2+50) { //il mouse si trova sul secondo elemento
      //cambio il cursore del mouse
      cursor(HAND);
      //riproduco l'elemento musicale
      if (playSound) {
        menuMove.play();
        playSound = false;
      }
      //imposto il movimento, il colore e la dimensione del testo casuale intorno alla parola
      float menu1x = random(width/2-10, width/2+10);
      float menu1y = random(height/2+40, height/2+60);
      textSize(24);
      fill(random(255), random(255), random(255));
      //disegno la parola
      text("Stimulants", menu1x, menu1y);
      //ripristino il colore degli altri elementi nel menu
      fill(255);
      //imposto la logica per la quale il click mi porta a quella sezione del codice
      if (mousePressed) {
        droga = 2;
        lvlSelect.play();
        cursor(ARROW);
      }
    } else if (mouseX > width/2 - 75 && mouseX < width/2 + 75 && mouseY > height/2 + 85 && mouseY < height/2 + 100) { //il mouse si trova sul terzo elemento
      //cambio il cursore del mouse
      cursor(HAND);
      //riproduco l'elemento musicale
      if (playSound) {
        menuMove.play();
        playSound = false;
      }
      //imposto colore ed opacità della parola
      if (decreasing) {
        menu3size = menu3size - 0.1f;
        menu3opacity = menu3opacity - 2;
        if (menu3size < 18) {
          decreasing = false;
        }
      }
      if (!decreasing) {
        menu3size = menu3size + 0.1f;
        menu3opacity = menu3opacity + 2;
        if (menu3size > 32) {
          decreasing = true;
        }
      }
      if (mousePressed) {
        droga = 3;
        lvlSelect.play();
        cursor(ARROW);
      }
      // fill(255);
    } else if (mouseX > width - 230 && mouseY > height - 50) { // tasto info about the game
      cursor(HAND);

      if (mousePressed) {
        droga = 999;
        gameInfo = true;
        cursor(ARROW);
      }
    } else {
      // il muose non è su nessun pulsante
      playSound = true;
      menu3size = 24;
      menu2x = width/2;
      menu2y = height/2 + 50;
      menu3opacity = 255;
      cursor(ARROW);
      hoverMenu1Pos = 0;
      menu1Opacity = 255;
    }
  }

  //ANCHOR allucinogeni
  if (droga == 1 ) {
    if (livello == 0) {
      textAlign(CENTER);
      textSize(30);
      text("How to play:", width/2, height/2-150);
      textSize(30);
      text("Just write \"i'm fine\"", width/2, height/2-100);
      textSize(36);
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            s="";
            livello = 1;
            lvlComplete.play();
            cursor(ARROW);
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if (livello == 1) {
      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }

      float xpunto = width;
      float diametro = 150;
      int numeroDiPunti = 100;

      pushMatrix();
        noStroke();
        fill(255, 255, 255);
        translate(width/2, height/2);

        for(int a = 0; a < 360; a+=45) {
          rotate(radians(a));
          pushMatrix();
            for(int i = 0; i < numeroDiPunti; i++) {
              scale(0.95f);
              rotate(radians(angolo));
              ellipse(xpunto, 0, diametro, diametro);
            }
          popMatrix();
        }
        angolo += 0.03f;
      popMatrix();

      textAlign(LEFT);
      textSize(20);
      text("Level 1", 10, 20);
      textAlign(CENTER);
      textSize(36);
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            livello = 2;
            lvlComplete.play();
            cursor(ARROW);
            newLevel = true;
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if (livello == 2) {
      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }

      float xpunto = width;
      float diametro = 150;
      int numeroDiPunti = 100;

      pushMatrix();
        noStroke();
        fill(255, 255, 255);
        translate(width/2, height/2);

        for(int a = 0; a < 360; a+=45) {
          rotate(radians(a));
          pushMatrix();
            if(second() % 2 == 0) {
              fill(random(0,255),random(0,255),random(0,255));
            }
            for(int i = 0; i < numeroDiPunti; i++) {
              scale(0.95f);
              rotate(radians(angolo));
              ellipse(xpunto, 0, diametro, diametro);
            }
          popMatrix();
        }
        angolo += 0.03f;
      popMatrix();

      textAlign(LEFT);
      textSize(20);
      text("Level 2", 10, 20);
      textAlign(CENTER);
      textSize(36);
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            cursor(ARROW);
            livello = 3;
            lvlComplete.play();
            newLevel = true;
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if (livello == 3) {
      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }
      textAlign(LEFT);
      textSize(20);
      textAlign(CENTER);
      textSize(36);
      textAlign(LEFT);
      fill(255);

      for(int i = 0; i < floor((width/((characterWidth*8) + 20)) + 1); i++) {
        for(int j = 0; j < floor((height/55)); j++) {
          text(stringalv3, xiniz + (160 * i), yiniz * (j+1));
        }
      }
      
      switch (s.length()) {
        case 1:
          stringalv3 = "R'M FINE";
          break;
        case 2:
          stringalv3 = "R M FINE";
          break;
        case 3:
          stringalv3 = "R U FINE";
          break;
        case 4:
          stringalv3 = "R U FANE";
          break;
        case 5:
          stringalv3 = "R U SANE";
          break;
        case 6:
          stringalv3 = "R U SUNE";
          break;
        case 7:
          stringalv3 = "R U SURE";
          break;
        case 8:
          quitTimer++;
          for(ciclofine = 0; ciclofine <= 60; ciclofine++){
            fill(255, 0, 0);
            text("?", random(0, width), random(0, height));
            tooMuchText.play();
          }
          if(quitTimer >= 100) exit();
          break;
        default :
          stringalv3 = "I'M FINE";
        break;	
      }
    }

    if (livello == 4) {
      textSize(48);
      text("CONGRATULATIONS!", width/2, height/2);
      textAlign(CENTER);
      textSize(36);
      text("THANK YOU", width/2, height/2+120);
      textSize(18);
      text("Press any key to exit, or \"M\" to go back to the main menu.", width/2, height/2 + 140);
      if (gameOver) {
        lvlSelect.play();
        gameOver = false;
      }
    }

  }

  //ANCHOR stimolanti
  if (droga == 2 ) {
    if (livello == 0) {
      textAlign(CENTER);
      textSize(30);
      text("How to play:", width/2, height/2-150);
      textSize(30);
      text("Just write \"i'm fine\"", width/2, height/2-100);
      textSize(36);
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        textAlign(LEFT);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            cursor(ARROW);
            livello = 1;
            lvlComplete.play();
            s = "";
            newLevel = true;
          }
        }
      }
    } else {
      for (int i = 0; i < amountOfStrings; i++) {
        textSize(22);
        fill(255, 50);

        if(livello == 1) {
          text(paranoiaStrings[i], paranoiaPositionsX[i], paranoiaPositionsY[i]);
        } else if (livello == 2) {

          if(i + 1 <= typedLettersLv2) {
            fill(random(255),random(255),random(255));
            text(paranoiaStrings[i], (paranoiaPositionsX[i] + PApplet.parseInt(random(-5,5))), (paranoiaPositionsY[i]) + PApplet.parseInt(random(-5,5)));
          } else {
            text(paranoiaStrings[i], paranoiaPositionsX[i], paranoiaPositionsY[i]);
          }
        }
      }
      fill(255);
    }

    if(livello == 1) {
       if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }

      textAlign(LEFT);
      textSize(20);
      text("Level 1", 10, 20);
      textAlign(CENTER);
      textSize(36);
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        textAlign(LEFT);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            livello = 2;
            lvlComplete.play();
            cursor(ARROW);
            newLevel = true;
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if(livello == 2) {
      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }
      textAlign(LEFT);
      textSize(20);
      text("Level 1", 10, 20);
      textAlign(CENTER);
      textSize(36);
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);

      int tempStringX = width/2-72;
      int tempStringY = height/2+30;

      if(s.equals("i'm ") && timesTextHasChanged == 0) {
        s = "i'm done";
        timesTextHasChanged = 1;
        cursorStart += characterWidth * 4;
      }

      if(s.equals("i") && timesTextHasChanged == 1) {
        s = "i need help";
        timesTextHasChanged = 2;
        cursorStart += characterWidth * 10;
      }

      if(s.equals("i'm done")) {
         stringTimer++;

         if(playDrone) {
           drone.play();
           playDrone = false;
         }
         
         if(stringTimer == 100) {
           s = "";
           stringTimer = 0;
           cursorStart = originalCursorStart;
           ding.play();
           playDrone = true;
         }

         fill(random(255), random(255), random(255));
         tempStringX += random(-5,5);
         tempStringY += random(-5,5);
      }

      if(s.equals("i need help")) {
        stringTimer++;

        if(playDrone) {
          drone.play();
          playDrone = false;
        }
        
        if(stringTimer == 100) {
          s = "i'm     fine";
          stringTimer = 0;
          cursorStart = originalCursorStart + characterWidth * 4;
          ding.play();
          playDrone = true;
        }

        fill(random(255), random(255), random(255));
        tempStringX += random(-5,5);
        tempStringY += random(-5,5);
      }

      text(s.toLowerCase(), tempStringX, tempStringY);

      if(s.equals("i'm     fine")) {
        int subStringX = tempStringX + PApplet.parseInt(characterWidth) * 4;
        int subStringY = tempStringY;

        fill(random(255), random(255), random(255));

        subStringX += random(-5,5);
        subStringY += random(-5,5);

        text(secondString.toLowerCase(), subStringX, subStringY);
      }

      if(secondString.toLowerCase().equals("not")) {
        livello = 3;
        newLevel = true;
      }
    }

    if(livello == 3) {
      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }
      textAlign(LEFT);
      textSize(20);
      text("Level 3", 10, 20);

      textSize(36);

      mouseIsOnValid = false;

      if(mouseX > width/2-300 && mouseX < width/2+500 && mouseY > height/2-180 && mouseY < height/2+150) {
        cursor(HAND);
      } else {
        cursor(ARROW);
      }

      text("  will not lose myself in this.", width/2 - 300, height/2-150);
      if(mouseX > width/2-300 && mouseX < width/2-280 && mouseY > height/2-180 && mouseY < height/2-150){
        if(mousePressed) {
          letterOneClicked = true;
        }
        mouseIsOnValid = true;
      }

      int letterOneX = width/2 - 300;
      int letterOneY = height/2-150;

      if(letterOneClicked) {
        letterOneX += random(-5,5);
        letterOneY += random(-5,5);
        fill(random(255), random(255), random(255));
      }

      text("i", letterOneX, letterOneY);
      fill(255);

      text("you d rather run away from me.", width/2 - 300, height/2-100);
      if(mouseX > width/2 - 300 + characterWidth * 3 && mouseX < width/2 - 280 + characterWidth * 3 && mouseY > height/2-130 && mouseY < height/2-100){
        if(mousePressed) {
          letterTwoClicked = true;
        }
        mouseIsOnValid = true;
      }
      
      int letterTwoX = PApplet.parseInt(width/2 - 300 + characterWidth * 3);
      int letterTwoY = height/2-100;

      if(letterTwoClicked) {
        letterTwoX += random(-5,5);
        letterTwoY += random(-5,5);
        fill(random(255), random(255), random(255));
      }

      text("'", letterTwoX, letterTwoY);
      fill(255);

      text("i can't  easure the pain. It hurts.", width/2 - 300, height/2-50);
      if(mouseX > width/2 - 300 + characterWidth * 8 && mouseX < width/2 - 280 + characterWidth * 8 && mouseY > height/2-80 && mouseY < height/2-50){
        if(mousePressed) {
          letterThreeClicked = true;
        }
        mouseIsOnValid = true;
      }

      int letterThreeX = PApplet.parseInt(width/2 - 300 + characterWidth * 8);
      int letterThreeY = height/2-50;

      if(letterThreeClicked) {
        letterThreeX += random(-5,5);
        letterThreeY += random(-5,5);
        fill(random(255), random(255), random(255));
      }

      text("m", letterThreeX, letterThreeY);
      fill(255);

      text("it's so hard. I  eel so lost.", width/2 - 300, height/2);
      if(mouseX > width/2 - 300 + characterWidth * 16 && mouseX < width/2 - 280 + characterWidth * 16 && mouseY > height/2-30 && mouseY < height/2){
        if(mousePressed) {
          letterFourClicked = true;
        }
        mouseIsOnValid = true;
      }

      int letterFourX = PApplet.parseInt(width/2 - 300 + characterWidth * 16);
      int letterFourY = height/2;

      if(letterFourClicked) {
        letterFourX += random(-5,5);
        letterFourY += random(-5,5);
        fill(random(255), random(255), random(255));
      }

      text("f", letterFourX, letterFourY);
      fill(255);

      text("my nose bleeds. Aga n. GIVE ME MORE!", width/2 - 300, height/2+50);
      if(mouseX > width/2 - 300 + characterWidth * 19 && mouseX < width/2 - 280 + characterWidth * 19 && mouseY > height/2+20 && mouseY < height/2+50){
        if(mousePressed) {
          letterFiveClicked = true;
        }
        mouseIsOnValid = true;
      }

      int letterFiveX = PApplet.parseInt(width/2 - 300 + characterWidth * 19);
      int letterFiveY = height/2+50;

      if(letterFiveClicked) {
        letterFiveX += random(-5,5);
        letterFiveY += random(-5,5);
        fill(random(255), random(255), random(255));
      }

      text("i", letterFiveX, letterFiveY);
      fill(255);

      text("THEY KNOW. All of them k ow. THEY HATE ME.", width/2 - 300, height/2+100);
      if(mouseX > width/2 - 300 + characterWidth * 24 && mouseX < width/2 - 280 + characterWidth * 24 && mouseY > height/2+70 && mouseY < height/2+100){
        if(mousePressed) {
          letterSixClicked = true;
        }
        mouseIsOnValid = true;
      }

      int letterSixX = PApplet.parseInt(width/2 - 300 + characterWidth * 24);
      int letterSixY = height/2+100;

      if(letterSixClicked) {
        letterSixX += random(-5,5);
        letterSixY += random(-5,5);
        fill(random(255), random(255), random(255));
      }

      text("n", letterSixX, letterSixY);
      fill(255);

      text("All of this is unbearable but... i'm fin .", width/2 - 300, height/2+150);
      if(mouseX > width/2 - 300 + characterWidth * 40 && mouseX < width/2 - 280 + characterWidth * 40 && mouseY > height/2+120 && mouseY < height/2+150){
        if(mousePressed) {
          letterSevenClicked = true;
        }
        mouseIsOnValid = true;
      }

      int letterSevenX = PApplet.parseInt(width/2 - 300 + characterWidth * 40);
      int letterSevenY = height/2+150;

      if(letterSevenClicked) {
        letterSevenX += random(-5,5);
        letterSevenY += random(-5,5);
        fill(random(255), random(255), random(255));
      }

      text("e", letterSevenX, letterSevenY);
      fill(255);

      if(letterOneClicked && letterTwoClicked && letterThreeClicked && letterFourClicked && letterFiveClicked && letterSixClicked && letterSevenClicked) {
        livello = 4;
      }
    }

    if (livello == 4) {
      textSize(48);
      text("CONGRATULATIONS!", width/2, height/2);
      textAlign(CENTER);
      textSize(36);
      text("THANK YOU", width/2, height/2+120);
      textSize(18);
      text("Press any key to exit, or \"M\" to go back to the main menu.", width/2, height/2 + 140);
      if (gameOver) {
        lvlSelect.play();
        gameOver = false;
      }
    }
  }

  //ANCHOR cannabinoidi
  if (droga == 3 ) {
    if (livello == 0) {
      textAlign(CENTER);
      textSize(30);
      text("How to play:", width/2, height/2-150);
      textSize(30);
      text("Just write \"I'm fine\"", width/2, height/2-100);
      textSize(36);
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            cursor(ARROW);
            livello = 1;
            lvlComplete.play();
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if (livello == 1) {
      textAlign(LEFT);
      textSize(20);
      text("Level 1", 10, 20);
      textAlign(CENTER);
      textSize(36);
      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);

      if (b_timer.check(PApplet.parseInt(random(2000,4000))) == true) {
        if (b.length() > 0) {
          s = s + b.substring(0, 1);
          cursorStart = cursorStart + characterWidth;
          b = b.substring(1, b.length());
        }
        b_timer.start();
      }
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            cursor(ARROW);
            livello = 2;
            lvlComplete.play();
            newLevel = true;
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if (livello == 2) {
      textAlign(LEFT);
      textSize(20);
      text("Level 2", 10, 20);
      textAlign(CENTER);
      textSize(menu3size + 12);

      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      fill(255, menu3opacity);
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (b_timer.check(PApplet.parseInt(random(2000.0f, 4000.0f))) == true) {
        if (b.length() > 0) {
          s = s + b.substring(0, 1);
          cursorStart = cursorStart + characterWidth;
          b = b.substring(1, b.length());
        }
        b_timer.start();
      }
      if (decreasing) {
        menu3size = menu3size - 0.2f;
        menu3opacity = menu3opacity - 15;
        if (menu3size < 18) {
          decreasing = false;
        }
      }
      if (!decreasing) {
        menu3size = menu3size + 0.2f;
        menu3opacity = menu3opacity + 14.3f;
        if (menu3size > 32) {
          decreasing = true;
        }
      }
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed){
            livello = 3;
            lvlComplete.play();
            newLevel = true;
            menu3size = 24;
            menu3opacity = 255;
            cursor(ARROW);
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if (livello == 3) {
      textAlign(LEFT);
      textSize(20);
      text("Level 3", 10, 20);
      textAlign(CENTER);
      textSize(menu3size + 12);

      if (newLevel) {
        s = "";
        newLevel = false;
        cursorStart = originalCursorStart;
        solved = true;
      }
      if (second() % 2 == 0) {
        fill(255);
        rect(cursorStart, height/2+35, 14, 3);
      }
      fill(255, menu3opacity);
      textAlign(LEFT);
      text(s.toLowerCase(), width/2-72, height/2+30);
      if (b_timer.check(PApplet.parseInt(random(2000.0f, 4000.0f))) == true) {
        if (b.length() > 0) {
          s = s + b.substring(0, 1);
          cursorStart = cursorStart + characterWidth;
          b = b.substring(1, b.length());
        }
        b_timer.start();
      }
      if (decreasing) {
        menu3size = menu3size - 0.2f;
        menu3opacity = menu3opacity - 15;
        if (menu3size < 18) {
          decreasing = false;
        }
      }
      if (!decreasing) {
        menu3size = menu3size + 0.2f;
        menu3opacity = menu3opacity + 14.3f;
        if (menu3size > 32) {
          decreasing = true;
        }
      }
      if (DrogaLv0.equals(s)) {
        if (solved) {
          lvlSolved.play();
          solved = false;
        }
        textAlign(CENTER);
        text("DONE", width/2, height/2+115);
        //click per livello 2
        if (mouseX > width/2 - 35 && mouseX < width/2 + 35 && mouseY > height/2+95 && mouseY < height/2+115) {
          cursor(HAND);
          if(mousePressed) {
            cursor(ARROW);
            livello = 4;
            lvlComplete.play();
            newLevel = true;
          }
        } else {
          cursor(ARROW);
        }
      }
    }

    if (livello == 4) {
      textSize(48);
      text("CONGRATULATIONS!", width/2, height/2);
      textAlign(CENTER);
      textSize(36);
      text("THANK YOU", width/2, height/2+120);
      textSize(18);
      text("Press any key to exit, or \"M\" to go back to the main menu.", width/2, height/2 + 140);
      if (gameOver) {
        lvlSelect.play();
        gameOver = false;
      }
    }
  }
}

 public void keyReleased() {
  if (droga != 0 && livello == 0) {
    if (key != BACKSPACE && key != DELETE) {
      if (s.length() < 8) {
        s = s + key;
      } else {
        tooMuchText.play();
      }
    }
    if (key != BACKSPACE && key != DELETE && cursorStart < originalCursorStart + (characterWidth * 8)) {
      cursorStart = cursorStart + characterWidth;
    }
  } else if (droga == 3 && livello == 1 && key != BACKSPACE && key != DELETE) {
    if (s.length() < 8) {    //meccanica di gioco primo livello cannabinoidi
      b = b + key;
    } else {
      tooMuchText.play();
    }
    if (b_timer.state == false) {
      b_timer.start();
    }
  } else if (droga == 3 && livello == 2 && key != BACKSPACE && key != DELETE) {
    if (s.length() < 8) {
      b = b + key;
    } else {
      tooMuchText.play();
    }
    if (b_timer.state == false) {
      b_timer.start();
    }
  } else if (droga == 3 && livello == 3 && key != BACKSPACE && key != DELETE) {
    if (s.length() < 8) {
      contatore = contatore + 1;
      if(contatore > 2) {
        b = b + key;
        contatore = 0;
      }
    } else {
      tooMuchText.play();
    }
    if (b_timer.state == false) {
      b_timer.start();
      }
  } else if (droga == 1 && livello == 1 && key != BACKSPACE && key != DELETE) {
    if (key != BACKSPACE && key != DELETE) {
      if (s.length() < 8) {
        s = s + key;
      } else {
        tooMuchText.play();
      }
    }
    if (key != BACKSPACE && key != DELETE && cursorStart < originalCursorStart + (characterWidth * 8)) {
      cursorStart = cursorStart + characterWidth;
    }
  } else if (droga == 1 && livello == 2 && key != BACKSPACE && key != DELETE) {
    if (key != BACKSPACE && key != DELETE) {
      /* Key if's */ if (s.length() < 8) {
        if(key == 'q'){
          s = s + 'w';
        }

        if(key == 'w'){
          s = s + 'e';
        }

        if(key == 'e'){
          s = s + 'r';
        }

        if(key == 'r'){
          s = s + 't';
        }

        if(key == 't'){
          s = s + 'y';
        }

        if(key == 'y'){
          s = s + 'u';
        }

        if(key == 'u'){
          s = s + 'i';
        }

        if(key == 'i'){
          s = s + 'o';
        }

        if(key == 'o'){
          s = s + 'p';
        }

        if(key == 'a'){
          s = s + 's';
        }

        if(key == 's'){
          s = s + 'd';
        }

        if(key == 'd'){
          s = s + 'f';
        }

        if(key == 'f'){
          s = s + 'g';
        }

        if(key == 'g'){
          s = s + 'h';
        }

        if(key == 'h'){
          s = s + 'j';
        }

        if(key == 'j'){
          s = s + 'k';
        }

        if(key == 'k'){
          s = s + 'l';
        }

        if(key == 'z'){
          s = s + 'x';
        }

        if(key == 'x'){
          s = s + 'c';
        }

        if(key == 'c'){
          s = s + 'v';
        }

        if(key == 'v'){
          s = s + 'b';
        }

        if(key == 'b'){
          s = s + 'n';
        }

        if(key == 'n'){
          s = s + 'm';
        }

        if(key == '\''){
          s = s + '\'';
        }

        if(key == ' '){
          s = s + ' ';
        }
      } else {
        tooMuchText.play();
      }
    }
    if (key != BACKSPACE && key != DELETE && cursorStart < originalCursorStart + (characterWidth * 8)) {
      cursorStart = cursorStart + characterWidth;
    }
  } else if (droga == 1 && livello == 3 && key != BACKSPACE && key != DELETE) {
    if (key != BACKSPACE && key != DELETE) {
      if (s.length() < 8) {
        if(s.length() == 7){
          if(key == 'y' || key == 'Y'){
            s = "";
            livello = 4;
          }
        }
        s = s + key;
      } else {
        tooMuchText.play();
      }
    }
    if (key != BACKSPACE && key != DELETE && cursorStart < originalCursorStart + (characterWidth * 8)) {
      cursorStart = cursorStart + characterWidth;
    }
  } else if (droga == 2 && livello == 1 && key != BACKSPACE && key != DELETE) {
    if (key != BACKSPACE && key != DELETE) {
      if (s.length() < 8) {
        s = s + key;
      } else {
        tooMuchText.play();
      }
      if(random(1) > 0.5f) {
        tw1.play();
      } else {
        tw2.play();
      }
    }
    if (key != BACKSPACE && key != DELETE && cursorStart < originalCursorStart + (characterWidth * 8)) {
      cursorStart = cursorStart + characterWidth;
    }
  } else if (droga == 2 && livello == 2 && key != BACKSPACE && key != DELETE) {
    if (key != BACKSPACE && key != DELETE) {
      typedLettersLv2++;
      if (s.length() < 8 && !s.equals("i'm     fine")) {
        s = s + key;
      } else if(secondString.length() < 3 && s.equals("i'm     fine")) {
        secondString = secondString + key;
      } else {
        tooMuchText.play();
      }
      if(random(1) > 0.5f) {
        tw1.play();
      } else {
        tw2.play();
      }
    }
    if (key != BACKSPACE && key != DELETE && cursorStart < originalCursorStart + (characterWidth * 8)) {
      cursorStart = cursorStart + characterWidth;
    }
  } else if (droga != 0 && livello == 4 && key != BACKSPACE && key != DELETE) {
    if(key == 'm') {
      droga = 0;
      livello = 0;
      s = "";
      cursorStart = originalCursorStart; 
    } else {
      exit();
    }
  } 
  
  if (droga == 2 && livello != 0 && key != BACKSPACE && key != DELETE) {
    if(amountOfStrings < 12 && s.length() < 8) {
      amountOfStrings++;
    }
  }

  if (key == TAB) {
    droga = 0;
    livello = 0;
    s = "";
    cursorStart = originalCursorStart;
  }
}

 public void mouseReleased() {
  if(droga == 2 && livello == 3 && levelEndLives > 0 && !mouseIsOnValid && mouseX > width/2-300 && mouseX < width/2+500 && mouseY > height/2-180 && mouseY < height/2+150) {
    levelEndLives--;
    ding.play();
    if(levelEndLives <= 0) {
      livello = 0;
      levelEndLives = 3;
      letterOneClicked = false;
      letterTwoClicked = false;
      letterThreeClicked = false;
      letterFourClicked = false;
      letterFiveClicked = false;
      letterSixClicked = false;
      letterSevenClicked = false;
      amountOfStrings = 0;
      s="";
      secondString = "";
      timesTextHasChanged = 0;
      typedLettersLv2 = PApplet.parseInt(random(0,5));
    }
  }
}

 public void keyPressed() {
  if (key == BACKSPACE || key == DELETE) {
    if(!s.equals("i'm     fine")) {
      s = "";
      cursorStart = originalCursorStart;
    } else {
      secondString = "";
      cursorStart = originalCursorStart + characterWidth * 4;
    }
    solved = true;
    menu3size = 24;
    menu3opacity = 255;
    if(livello == 3) {
      contatore = 0;
      livello = 0;
    }
  }
}
class Timer {

  boolean state = false;
  int ts;
  
   public void start(){
      ts = millis();
      state = true;
  }

   public void stop(){
      state = false;
  }

   public boolean check(int tempo){
    if(millis() - ts >= tempo){
      return true;
    } else {
      return false;
    }
  }

}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "EUPHORYA" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
